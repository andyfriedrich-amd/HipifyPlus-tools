


#include "core/providers/rocm/rocm_common.h"
#include "core/providers/rocm/rocm_execution_provider.h"
#include "contrib_ops/rocm/transformers/beam_search.h"
#include "contrib_ops/rocm/transformers/generation_device_helper.h"
#include "contrib_ops/rocm/transformers/dump_rocm_tensor.h"

namespace onnxruntime {
namespace contrib {
namespace rocm {

ONNX_OPERATOR_KERNEL_EX(
  BeamSearch, kMSDomain, 1, kRocmExecutionProvider, (*KernelDefBuilder::Create())
    .InputMemoryType(OrtMemTypeCPUInput, 0)  
    .InputMemoryType(OrtMemTypeCPUInput, 1)  
    .InputMemoryType(OrtMemTypeCPUInput, 2)  
    .InputMemoryType(OrtMemTypeCPUInput, 3)  
    .InputMemoryType(OrtMemTypeCPUInput, 4)  
    .InputMemoryType(OrtMemTypeCPUInput, 5)  
    .InputMemoryType(OrtMemTypeCPUInput, 6)  
    .InputMemoryType(OrtMemTypeCPUInput, 9)  
    .InputMemoryType(OrtMemTypeCPUInput, 10)  
    .OutputMemoryType(OrtMemTypeCPUOutput, 0) 
    .InputMemoryType(OrtMemTypeCPUInput, 11)  
    .OutputMemoryType(OrtMemTypeCPUOutput, 1) 
    .TypeConstraint("T", {DataTypeImpl::GetTensorType<float>(), DataTypeImpl::GetTensorType<MLFloat16>()}), BeamSearch);

transformers::HipTensorConsoleDumper g_rocm_dumper;

BeamSearch::BeamSearch(const OpKernelInfo& info)
  : onnxruntime::contrib::transformers::BeamSearch(info) {
 SetDeviceHelpers(GenerationCudaDeviceHelper::ReorderPastState, GenerationCudaDeviceHelper::InitCacheIndir, GenerationCudaDeviceHelper::AddToFeeds, GenerationCudaDeviceHelper::TopK, GenerationCudaDeviceHelper::DeviceCopy<float>, GenerationCudaDeviceHelper::DeviceCopy<int32_t>, GenerationCudaDeviceHelper::ProcessLogits<float>, GenerationCudaDeviceHelper::ProcessLogits<MLFloat16>, GenerationCudaDeviceHelper::InitBeamState<float>, GenerationCudaDeviceHelper::InitBeamState<MLFloat16>);

 SetDeviceHelpers_Gpt(GenerationCudaDeviceHelper::UpdateGptFeeds<float>, GenerationCudaDeviceHelper::UpdateGptFeeds<MLFloat16>);

 SetDeviceHelpers_EncoderDecoder(GenerationCudaDeviceHelper::UpdateDecoderFeeds<float>, GenerationCudaDeviceHelper::UpdateDecoderFeeds<MLFloat16>, GenerationCudaDeviceHelper::ExpandBuffer<int32_t>, GenerationCudaDeviceHelper::ExpandBuffer<float>, GenerationCudaDeviceHelper::ExpandBuffer<MLFloat16>);

 SetConsoleDumper(&g_rocm_dumper);

#ifndef USE_ROCM
 rocm_device_prop_ = &reinterpret_cast<const ROCMExecutionProvider*>(info.GetExecutionProvider())->GetDeviceProp();

 rocm_device_arch_ = static_cast<const hipDeviceProp_t*>(rocm_device_prop_)->major * 100 +
           static_cast<const hipDeviceProp_t*>(rocm_device_prop_)->minor * 10;
#endif
}

Status BeamSearch::ComputeInternal(OpKernelContext* context) const {
 return onnxruntime::contrib::transformers::BeamSearch::Compute(context);
}

Status BeamSearch::Compute(OpKernelContext* context) const {
 auto s = ComputeInternal(context);

 if (s.IsOK()) {
  auto err = hipGetLastError();
  if (err != hipSuccess) {
   return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "ROCM error ", hipGetErrorName(err), ":", hipGetErrorString(err));
  }
 }

 return s;
}

} 
} 
} 
