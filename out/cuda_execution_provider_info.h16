


#pragma once

#include <functional>
#include <limits>

#include "core/common/hash_combine.h"
#include "core/framework/arena_extend_strategy.h"
#include "core/framework/ortdevice.h"
#include "core/framework/provider_options.h"
#include "core/session/onnxruntime_c_api.h"

namespace onnxruntime {

struct CUDAExecutionProviderExternalAllocatorInfo {
 void* alloc{nullptr};
 void* free{nullptr};
 void* empty_cache{nullptr};

 CUDAExecutionProviderExternalAllocatorInfo() {
  alloc = nullptr;
  free = nullptr;
  empty_cache = nullptr;
 }

 CUDAExecutionProviderExternalAllocatorInfo(void* a, void* f, void* e) {
  alloc = a;
  free = f;
  empty_cache = e;
 }

 bool UseExternalAllocator() const {
  return (alloc != nullptr) && (free != nullptr);
 }
};

namespace cuda {
struct TunableOpInfo {
 bool enable{false};
 bool tuning_enable{false};
 int max_tuning_duration_ms{};
};
} 

struct CUDAExecutionProviderInfo {
 OrtDevice::DeviceId device_id{0};
 size_t gpu_mem_limit{std::numeric_limits<size_t>::max()};             
 ArenaExtendStrategy arena_extend_strategy{ArenaExtendStrategy::kNextPowerOfTwo}; 
 OrtCudnnConvAlgoSearch cudnn_conv_algo_search{OrtCudnnConvAlgoSearchExhaustive};
 bool do_copy_in_default_stream{true};
 bool has_user_compute_stream{false};
 void* user_compute_stream{nullptr};
 
 
 
 
 OrtArenaCfg* default_memory_arena_cfg{nullptr};
 CUDAExecutionProviderExternalAllocatorInfo external_allocator_info{};

 
 
 bool cudnn_conv_use_max_workspace{true};

 bool enable_cuda_graph{false};

 
 bool cudnn_conv1d_pad_to_nc1d{false};

 cuda::TunableOpInfo tunable_op{};

 bool enable_skip_layer_norm_strict_mode{false};

 static CUDAExecutionProviderInfo FromProviderOptions(const ProviderOptions& options);
 static ProviderOptions ToProviderOptions(const CUDAExecutionProviderInfo& info);
 static ProviderOptions ToProviderOptions(const OrtCUDAProviderOptionsV2& info);
};
} 

template <>
struct std::hash<::onnxruntime::cuda::TunableOpInfo> {
 size_t operator()(const ::onnxruntime::cuda::TunableOpInfo& info) const {
  size_t seed_and_value{0xbc9f1d34};
  onnxruntime::HashCombine(info.enable, seed_and_value);
  onnxruntime::HashCombine(info.tuning_enable, seed_and_value);
  onnxruntime::HashCombine(info.max_tuning_duration_ms, seed_and_value);
  return seed_and_value;
 }
};
