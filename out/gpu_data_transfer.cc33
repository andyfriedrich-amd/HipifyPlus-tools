


#include "core/providers/shared_library/provider_api.h"

#include "core/providers/cuda/gpu_data_transfer.h"
#include "cuda_common.h"

namespace onnxruntime {
GPUDataTransfer::GPUDataTransfer() {}

GPUDataTransfer::~GPUDataTransfer() {}

bool GPUDataTransfer::CanCopy(const OrtDevice& src_device, const OrtDevice& dst_device) const {
 return src_device.Type() == OrtDevice::GPU || src_device.MemType() == OrtDevice::MemType::CUDA_PINNED ||
     dst_device.Type() == OrtDevice::GPU || dst_device.MemType() == OrtDevice::MemType::CUDA_PINNED;
}

common::Status GPUDataTransfer::CopyTensor(const Tensor& src, Tensor& dst) const {
 size_t bytes = src.SizeInBytes();
 const void* src_data = src.DataRaw();
 void* dst_data = dst.MutableDataRaw();

 auto& src_device = src.Location().device;
 auto& dst_device = dst.Location().device;

 
 if (dst_device.Type() == OrtDevice::GPU) {
  if (src_device.Type() == OrtDevice::GPU) {
   
   if (dst_data != src_data) {
    CUDA_RETURN_IF_ERROR(cudaMemcpy(dst_data, src_data, bytes, cudaMemcpyDeviceToDevice));
    CUDA_RETURN_IF_ERROR(cudaStreamSynchronize(nullptr));
   }
  } else {
   
   CUDA_RETURN_IF_ERROR(cudaMemcpy(dst_data, src_data, bytes, cudaMemcpyHostToDevice));
   CUDA_RETURN_IF_ERROR(cudaStreamSynchronize(nullptr));
  }
 } else if (src_device.Type() == OrtDevice::GPU) {
  
  CUDA_RETURN_IF_ERROR(cudaMemcpy(dst_data, src_data, bytes, cudaMemcpyDeviceToHost));
  CUDA_RETURN_IF_ERROR(cudaStreamSynchronize(nullptr));
 } else {
  
  memcpy(dst_data, src_data, bytes);
 }

 return Status::OK();
}

common::Status GPUDataTransfer::CopyTensorAsync(const Tensor& src, Tensor& dst, Stream& stream) const {
 size_t bytes = src.SizeInBytes();
 const void* src_data = src.DataRaw();
 void* dst_data = dst.MutableDataRaw();

 auto& src_device = src.Location().device;
 auto& dst_device = dst.Location().device;

 if (dst_device.Type() == OrtDevice::GPU) {
  if (src_device.Type() == OrtDevice::CPU) {
   
   CUDA_RETURN_IF_ERROR(cudaMemcpyAsync(dst_data, src_data, bytes, cudaMemcpyHostToDevice, static_cast<cudaStream_t>(stream.GetHandle())));
  } else if (src_device.Type() == OrtDevice::GPU) {
   
   if (dst_data != src_data) {
    CUDA_RETURN_IF_ERROR(cudaMemcpyAsync(dst_data, src_data, bytes, cudaMemcpyDeviceToDevice, static_cast<cudaStream_t>(stream.GetHandle())));
   }
  }
 } else if (src_device.Type() == OrtDevice::GPU) {
  if (dst_device.Type() == OrtDevice::CPU) {
   
   CUDA_RETURN_IF_ERROR(cudaMemcpyAsync(dst_data, src_data, bytes, cudaMemcpyDeviceToHost, static_cast<cudaStream_t>(stream.GetHandle())));
  }
 } else {
  if (src_device.MemType() == OrtDevice::MemType::CUDA_PINNED) {
   
   CUDA_RETURN_IF_ERROR(cudaStreamSynchronize(static_cast<cudaStream_t>(stream.GetHandle())));
  }
  memcpy(dst_data, src_data, bytes);
 }

 return Status::OK();
}

} 
