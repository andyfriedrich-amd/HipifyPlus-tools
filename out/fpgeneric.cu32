









#include "core/providers/cuda/cu_inc/common.cuh"
#include <curand_kernel.h>

#define TRANS_TILE_DIM 32
#define BLOCK_ROWS 8
#define COPY_TILE_DIM 1024
#define COPY_BLOCK_DIM 256


namespace {


__global__ void transposeNoOverlap(half* odata, const half* idata, const int m, const int n) {
 __shared__ half tile[TRANS_TILE_DIM][TRANS_TILE_DIM + 1];

 int x = blockIdx.x * TRANS_TILE_DIM + threadIdx.x;
 int y = blockIdx.y * TRANS_TILE_DIM + threadIdx.y;

 if (x < m) {
  for (int j = 0; j < TRANS_TILE_DIM; j += BLOCK_ROWS) {
   if (j >= (n - y)) continue;
   tile[threadIdx.y + j][threadIdx.x] = idata[(y + j) * m + x];
  }
 }

 __syncthreads();

 x = blockIdx.y * TRANS_TILE_DIM + threadIdx.x; 
 y = blockIdx.x * TRANS_TILE_DIM + threadIdx.y;

 if (x >= n) return;

 for (int j = 0; j < TRANS_TILE_DIM; j += BLOCK_ROWS) {
  if ((y + j) >= m) return;
  odata[(y + j) * n + x] = tile[threadIdx.x][threadIdx.y + j];
 }
}

__global__ void CopyVectorHalf(const half* x, int incx, half* y, int incy, int n) {
 int id = blockIdx.x * blockDim.x + threadIdx.x;
 if (id >= n) return;
 y[id * incy] = x[id * incx];
}

__global__ void CopyVectorBFloat16(const onnxruntime::BFloat16* x, int incx, onnxruntime::BFloat16* y, int incy, int n) {
 int id = blockIdx.x * blockDim.x + threadIdx.x;
 if (id >= n) return;
 y[id * incy] = x[id * incx];
}

} 

dim3 cublasTransposeHelperDimGrid(int m, int n) {
 return dim3((n + TRANS_TILE_DIM - 1) / TRANS_TILE_DIM, (m + TRANS_TILE_DIM - 1) / TRANS_TILE_DIM, 1);
}


__host__ bool CanUse_cublasTransposeHelper_MLFloat16(int m, int n) {
 dim3 dimGrid = cublasTransposeHelperDimGrid(m, n);
 return dimGrid.y < 65536;
}

cublasStatus_t cublasTransposeHelper(cudaStream_t stream, cublasHandle_t, cublasOperation_t, cublasOperation_t, int m, int n, const half*, const half* A, int, const half*, const half*, int, half* C, int) {
 if (C != A) {
  dim3 dimGrid = cublasTransposeHelperDimGrid(m, n);
  dim3 dimBlock(TRANS_TILE_DIM, BLOCK_ROWS, 1);

  ORT_ENFORCE(dimGrid.y < 65536); 
  transposeNoOverlap<<<dimGrid, dimBlock, 0, stream>>>(C, A, n, m);
 } else {
  return CUBLAS_STATUS_NOT_SUPPORTED;
 }
 return CUBLAS_STATUS_SUCCESS;
}

cublasStatus_t cublasCopyHelper(cudaStream_t stream, cublasHandle_t, int n, const half* x, int incx, half* y, int incy) {
 dim3 dimGrid((unsigned int)(n + COPY_BLOCK_DIM - 1) / COPY_BLOCK_DIM, 1, 1);
 dim3 dimBlock(COPY_BLOCK_DIM, 1, 1);
 CopyVectorHalf<<<dimGrid, dimBlock, 0, stream>>>(x, incx, y, incy, n);
 return CUBLAS_STATUS_SUCCESS;
}

cublasStatus_t cublasCopyHelper(cudaStream_t stream, cublasHandle_t, int n, const onnxruntime::BFloat16* x, int incx, onnxruntime::BFloat16* y, int incy) {
 dim3 dimGrid((unsigned int)(n + COPY_BLOCK_DIM - 1) / COPY_BLOCK_DIM, 1, 1);
 dim3 dimBlock(COPY_BLOCK_DIM, 1, 1);
 CopyVectorBFloat16<<<dimGrid, dimBlock, 0, stream>>>(x, incx, y, incy, n);
 return CUBLAS_STATUS_SUCCESS;
}
